// This file is auto-generated by @hey-api/openapi-ts

import { client as _heyApiClient } from "./client.gen"
import type {
    GetLogsData,
    GetLogsResponse,
    PauseSimulationData,
    PauseSimulationResponse,
    ResumeSimulationData,
    ResumeSimulationResponse,
    SetSpeedData,
    SetSpeedResponse,
    StartSimulationData,
    StartSimulationResponse,
    StopSimulationData,
    StopSimulationResponse,
} from "./types.gen"
import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch"

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
    TData,
    ThrowOnError
> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>
}

export const stopSimulation = <ThrowOnError extends boolean = false>(
    options?: Options<StopSimulationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<StopSimulationResponse, unknown, ThrowOnError>({
        url: "/simulate/stop",
        ...options,
    })
}

export const startSimulation = <ThrowOnError extends boolean = false>(
    options?: Options<StartSimulationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<StartSimulationResponse, unknown, ThrowOnError>({
        url: "/simulate/start",
        ...options,
    })
}

export const setSpeed = <ThrowOnError extends boolean = false>(options: Options<SetSpeedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SetSpeedResponse, unknown, ThrowOnError>({
        url: "/simulate/control/speed",
        ...options,
    })
}

export const resumeSimulation = <ThrowOnError extends boolean = false>(
    options?: Options<ResumeSimulationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<ResumeSimulationResponse, unknown, ThrowOnError>({
        url: "/simulate/control/resume",
        ...options,
    })
}

export const pauseSimulation = <ThrowOnError extends boolean = false>(
    options?: Options<PauseSimulationData, ThrowOnError>,
) => {
    return (options?.client ?? _heyApiClient).post<PauseSimulationResponse, unknown, ThrowOnError>({
        url: "/simulate/control/pause",
        ...options,
    })
}

export const getLogs = <ThrowOnError extends boolean = false>(options?: Options<GetLogsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLogsResponse, unknown, ThrowOnError>({
        url: "/simulate/logs",
        ...options,
    })
}
